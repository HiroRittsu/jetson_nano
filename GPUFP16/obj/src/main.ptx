//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-25020191
// Cuda compilation tools, release 10.0, V10.0.166
// Based on LLVM 3.4svn
//

.version 6.3
.target sm_53
.address_size 64

	// .globl	_Z13Device_KernelP7__half2

.visible .entry _Z13Device_KernelP7__half2(
	.param .u64 _Z13Device_KernelP7__half2_param_0
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<113>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd2, [_Z13Device_KernelP7__half2_param_0];
	mov.u32 	%r9, %tid.x;
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %ctaid.x;
	mad.lo.s32 	%r1, %r10, %r11, %r9;
	setp.gt.u32	%p1, %r1, 524287;
	@%p1 bra 	BB0_4;

	cvta.to.global.u64 	%rd3, %rd2;
	mul.wide.u32 	%rd4, %r1, 4;
	add.s64 	%rd1, %rd3, %rd4;
	ld.global.u32 	%r112, [%rd1];
	mov.f32 	%f2, 0f3EFFF2E5;
	// inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f2;
  cvt.rn.f16.f32 high, %f2;
  mov.b32 %r12, {low,high};}

	// inline asm
	mov.f32 	%f4, 0f3F9E0419;
	// inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f4;
  cvt.rn.f16.f32 high, %f4;
  mov.b32 %r13, {low,high};}

	// inline asm
	mov.u32 	%r111, -65536;

BB0_2:
	// inline asm
	{mul.f16x2 %r15,%r12,%r112;
}
	// inline asm
	// inline asm
	{add.f16x2 %r18,%r15,%r13;
}
	// inline asm
	// inline asm
	{mul.f16x2 %r21,%r12,%r18;
}
	// inline asm
	// inline asm
	{add.f16x2 %r24,%r21,%r13;
}
	// inline asm
	// inline asm
	{mul.f16x2 %r27,%r12,%r24;
}
	// inline asm
	// inline asm
	{add.f16x2 %r30,%r27,%r13;
}
	// inline asm
	// inline asm
	{mul.f16x2 %r33,%r12,%r30;
}
	// inline asm
	// inline asm
	{add.f16x2 %r36,%r33,%r13;
}
	// inline asm
	// inline asm
	{mul.f16x2 %r39,%r12,%r36;
}
	// inline asm
	// inline asm
	{add.f16x2 %r42,%r39,%r13;
}
	// inline asm
	// inline asm
	{mul.f16x2 %r45,%r12,%r42;
}
	// inline asm
	// inline asm
	{add.f16x2 %r48,%r45,%r13;
}
	// inline asm
	// inline asm
	{mul.f16x2 %r51,%r12,%r48;
}
	// inline asm
	// inline asm
	{add.f16x2 %r54,%r51,%r13;
}
	// inline asm
	// inline asm
	{mul.f16x2 %r57,%r12,%r54;
}
	// inline asm
	// inline asm
	{add.f16x2 %r60,%r57,%r13;
}
	// inline asm
	// inline asm
	{mul.f16x2 %r63,%r12,%r60;
}
	// inline asm
	// inline asm
	{add.f16x2 %r66,%r63,%r13;
}
	// inline asm
	// inline asm
	{mul.f16x2 %r69,%r12,%r66;
}
	// inline asm
	// inline asm
	{add.f16x2 %r72,%r69,%r13;
}
	// inline asm
	// inline asm
	{mul.f16x2 %r75,%r12,%r72;
}
	// inline asm
	// inline asm
	{add.f16x2 %r78,%r75,%r13;
}
	// inline asm
	// inline asm
	{mul.f16x2 %r81,%r12,%r78;
}
	// inline asm
	// inline asm
	{add.f16x2 %r84,%r81,%r13;
}
	// inline asm
	// inline asm
	{mul.f16x2 %r87,%r12,%r84;
}
	// inline asm
	// inline asm
	{add.f16x2 %r90,%r87,%r13;
}
	// inline asm
	// inline asm
	{mul.f16x2 %r93,%r12,%r90;
}
	// inline asm
	// inline asm
	{add.f16x2 %r96,%r93,%r13;
}
	// inline asm
	// inline asm
	{mul.f16x2 %r99,%r12,%r96;
}
	// inline asm
	// inline asm
	{add.f16x2 %r102,%r99,%r13;
}
	// inline asm
	// inline asm
	{mul.f16x2 %r105,%r12,%r102;
}
	// inline asm
	// inline asm
	{add.f16x2 %r112,%r105,%r13;
}
	// inline asm
	add.s32 	%r111, %r111, 16;
	setp.ne.s32	%p2, %r111, 0;
	@%p2 bra 	BB0_2;

	st.global.u32 	[%rd1], %r112;

BB0_4:
	ret;
}


